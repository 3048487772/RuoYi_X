package ${packageName}.controller;

import java.util.List;
import cn.hutool.core.bean.BeanUtil;
import ${packageName}.domain.${className}VO.*;
import cn.hutool.core.convert.Convert;
import cn.hutool.core.lang.TypeReference;
import javax.servlet.http.HttpServletResponse;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.enums.BusinessType;
#if($imported)
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
#end
#if($swagger)
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.ruoyi.common.utils.poi.ExcelUtil;
#if($table.crud || $table.sub)
import com.ruoyi.common.core.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
#if($swagger)
@Api(tags = "${functionName}")    
#end
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController{
    @Autowired
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    #if($swagger)
    @ApiOperation("查询${functionName}列表")
    #end
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public TableDataInfo list(${ClassName}SearchVO ${className}){
        startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(BeanUtil.copyProperties(${className},${ClassName}.class));
        return getDataTable(Convert.convert(new TypeReference<List<${ClassName}ResultVO>>() {},list));
}
#elseif($table.tree)
    public AjaxResult list(${ClassName} ${className}){
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return success(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
    #if($swagger)
    @ApiOperation("导出${functionName}列表")
    #end
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className}){
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        List<${ClassName}ExportVO> exportList = Convert.convert(new TypeReference<List<${ClassName}ExportVO>>() {}, list);
        ExcelUtil<${ClassName}ExportVO> util = new ExcelUtil<${ClassName}ExportVO>(${ClassName}ExportVO.class);
        util.exportExcel(response, exportList, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
    #if($swagger)
    @ApiOperation("获取${functionName}详细信息")
    #end
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}){
        return AjaxResult.success(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    #if($swagger)
    @ApiOperation("新增${functionName}")
    #end
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody ${ClassName}CreateVO ${className}){
        return toAjax(${className}Service.insert${ClassName}(BeanUtil.copyProperties(${className},${ClassName}.class)));
    }

    /**
     * 修改${functionName}
     */
    #if($swagger)
    @ApiOperation("修改${functionName}")
    #end
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ${ClassName}UpdateVO ${className}){
        return toAjax(${className}Service.update${ClassName}(BeanUtil.copyProperties(${className},${ClassName}.class)));
    }

    /**
     * 删除${functionName}
     */
    #if($swagger)
    @ApiOperation("删除${functionName}")
    #end
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping("/{${pkColumn.javaField}s}")
    public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s){
        return toAjax(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));
    }
#if($imported)
    /**
     * 导入${functionName}
     */
    @Log(title = "${functionName}", businessType = BusinessType.IMPORT)
    @PostMapping("/importData")
    public AjaxResult importData(MultipartFile file, boolean updateSupport) throws Exception{
        ExcelUtil<${ClassName}ImportVO> util = new ExcelUtil<>(${ClassName}ImportVO.class);
        List<${ClassName}ImportVO> ${className}List = util.importExcel(file.getInputStream());
        String message = ${className}Service.imporIteminfo(Convert.convert(new TypeReference<List<${ClassName}>>() {},${className}List), updateSupport);
        return AjaxResult.success(message);
    }
    /**
     * 下载导入模板
     */
    @PostMapping("/importTemplate")
    public void importTemplate(HttpServletResponse response) throws IOException{
        ExcelUtil<${ClassName}ImportVO> util = new ExcelUtil<>(${ClassName}ImportVO.class);
        util.importTemplateExcel(response,"${functionName}");
    }
#end    
}
